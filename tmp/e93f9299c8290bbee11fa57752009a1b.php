<?php

class expressione93f9299c8290bbee11fa57752009a1b
{
    public static function expressionFunctione93f9299c8290bbee11fa57752009a1b($functionList,$variableList)
    {
        $for = [];
        return Helper\Cast\CastExpressionType::leadTypeByStructure(((function($functionList,$variableList)use(&$for){
    for($variableList->append('periodNumber', Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('int'))->setValue(((int)1)))->get('periodNumber')->getValue();($variableList->get('periodNumber')->getValue() <= (expressionbdd0ca22850c1d55c5e78a3b12964757::expressionFunctionbdd0ca22850c1d55c5e78a3b12964757($functionList,$variableList)->getValue() + ((int)1)));$variableList->append('periodNumber', Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('int'))->setValue(($variableList->get('periodNumber')->getValue() + ((int)1))))->get('periodNumber')->getValue()){
        (((((((($variableList->get('periodNumber')->getValue() > ((int)1)) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expression9c6cd5b3fc6f9410a694cdf57df834b3::expressionFunction9c6cd5b3fc6f9410a694cdf57df834b3($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedInterestCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue(((bool)false)))->getValue() : ((bool)true)) && (($variableList->get('periodNumber')->getValue() <= expressionbdd0ca22850c1d55c5e78a3b12964757::expressionFunctionbdd0ca22850c1d55c5e78a3b12964757($functionList,$variableList)->getValue()) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expression5a52dafc92328b7e85bed4162d028a2b::expressionFunction5a52dafc92328b7e85bed4162d028a2b($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedInterestCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue((($variableList->get('periodNumber')->getValue() === ((int)1)) ? ((bool)true) : ((bool)false))))->getValue() : ((bool)true))) && (($variableList->get('periodNumber')->getValue() > ((int)1)) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expressionbac6573c8ad90f5bfc9e04ab0cfa3f1c::expressionFunctionbac6573c8ad90f5bfc9e04ab0cfa3f1c($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedPaymentCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue(((bool)false)))->getValue() : ((bool)true))) && (($variableList->get('periodNumber')->getValue() <= expressionbdd0ca22850c1d55c5e78a3b12964757::expressionFunctionbdd0ca22850c1d55c5e78a3b12964757($functionList,$variableList)->getValue()) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expressione9f72d577a8f134ae9ae2b7be3552228::expressionFunctione9f72d577a8f134ae9ae2b7be3552228($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedPaymentCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue((($variableList->get('periodNumber')->getValue() === ((int)1)) ? ((bool)true) : ((bool)false))))->getValue() : ((bool)true))) && (($variableList->get('periodNumber')->getValue() > ((int)1)) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expressiona5ac7d42eabb9b91dbec9abbfc1b423f::expressionFunctiona5ac7d42eabb9b91dbec9abbfc1b423f($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedPrincipalCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue(((bool)false)))->getValue() : ((bool)true))) && (($variableList->get('periodNumber')->getValue() <= expressionbdd0ca22850c1d55c5e78a3b12964757::expressionFunctionbdd0ca22850c1d55c5e78a3b12964757($functionList,$variableList)->getValue()) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expression6369bec60ddca75d4a59abb3aa134cd8::expressionFunction6369bec60ddca75d4a59abb3aa134cd8($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedPrincipalCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue((($variableList->get('periodNumber')->getValue() === ((int)1)) ? ((bool)true) : ((bool)false))))->getValue() : ((bool)true))) && (($variableList->get('periodNumber')->getValue() <= expressionbdd0ca22850c1d55c5e78a3b12964757::expressionFunctionbdd0ca22850c1d55c5e78a3b12964757($functionList,$variableList)->getValue()) ? ($functionList->get('createCreditPartTransaction')->getFunction())(expression40382e2ebbef1c86c4343287115746f4::expressionFunction40382e2ebbef1c86c4343287115746f4($functionList,$variableList), expressiondb4d7262316e18f26767012900a16ec7::expressionFunctiondb4d7262316e18f26767012900a16ec7($functionList,$variableList), expression6369bec60ddca75d4a59abb3aa134cd8::expressionFunction6369bec60ddca75d4a59abb3aa134cd8($functionList,$variableList), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedService'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('calculatedPrincipalRestCurrentPeriod'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('string'))->setValue('issue'), Slov\Expression\Type\TypeFactory::getInstance()->create(new Slov\Expression\Type\TypeName('boolean'))->setValue((($variableList->get('periodNumber')->getValue() === ((int)1)) ? ((bool)true) : ((bool)false))))->getValue() : ((bool)true)));
    }
    $for = get_defined_vars();
    return true;
})($functionList,$variableList) && is_int(extract($for)) && empty($for = [])));
    }

    public static function getType()
    {
     //   return expressione93f9299c8290bbee11fa57752009a1b::expressionFunctione93f9299c8290bbee11fa57752009a1b()->getType();
        return new Slov\Expression\Type\TypeName('boolean');
    }
}